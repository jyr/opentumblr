#!/usr/bin/env python
# -*- coding: us-ascii -*-
# generated by wxGlade 0.6.3 on Thu Jun 04 14:50:24 2009

import wx

from text import Text
from photo import Photo
from quote import Quote
from link import Link
from chat import Chat
from audio import Audio
from video import Video
# begin wxGlade: extracode
# end wxGlade

#zodman import
import os, sys
# begin wxGlade: extracode
# end wxGlade



class Dashboard(wx.Panel):
    def __init__(self, parent, id):
        # begin wxGlade: Dashboard.__init__
        self.parent = parent
        self.api = self.parent.api
        wx.Panel.__init__(self, parent, id)
        self.path_images = '/usr/share/pixmaps/opentumblr/dashboard/'
        
        if not os.path.isdir(self.path_images):
            if sys.platform == "win32":
                self.path_images = os.path.abspath(os.path.dirname(__file__)) + '\\..\\images\\'
            else:
                self.path_images = os.path.abspath('images') + '/'

        self.p_botones = wx.Panel(self, -1)
        self.s_botones_staticbox = wx.StaticBox(self.p_botones, -1, "")
        self.l_dashboard = wx.StaticText(self, -1, "Dashboard", style=wx.ALIGN_CENTRE)
        self.sl_dashboard = wx.StaticLine(self, -1, style=wx.LI_VERTICAL)
        self.bmap_text = wx.BitmapButton(self.p_botones, -1, wx.Bitmap(self.path_images+"text.png", wx.BITMAP_TYPE_ANY))
        self.bmap_photo = wx.BitmapButton(self.p_botones, -1, wx.Bitmap(self.path_images+"photo.png", wx.BITMAP_TYPE_ANY))
        self.bmap_quote = wx.BitmapButton(self.p_botones, -1, wx.Bitmap(self.path_images+"quote.png", wx.BITMAP_TYPE_ANY))
        self.bmap_link = wx.BitmapButton(self.p_botones, -1, wx.Bitmap(self.path_images+"link.png", wx.BITMAP_TYPE_ANY))
        self.bmap_chat = wx.BitmapButton(self.p_botones, -1, wx.Bitmap(self.path_images+"chat.png", wx.BITMAP_TYPE_ANY))
        self.bmap_audio = wx.BitmapButton(self.p_botones, -1, wx.Bitmap(self.path_images+"audio.png", wx.BITMAP_TYPE_ANY))
        self.bmap_video = wx.BitmapButton(self.p_botones, -1, wx.Bitmap(self.path_images+"video.png", wx.BITMAP_TYPE_ANY))
        self.sl_botones = wx.StaticLine(self.p_botones, -1, style=wx.LI_VERTICAL)
        self.b_logout = wx.Button(self.p_botones, -1, "Log out")

        self.Bind(wx.EVT_BUTTON, self.OnText, id = self.bmap_text.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnPhoto, id = self.bmap_photo.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnQuote, id = self.bmap_quote.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnLink, id = self.bmap_link.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnChat, id = self.bmap_chat.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnAudio, id = self.bmap_audio.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnVideo, id = self.bmap_video.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnLogout, id = self.b_logout.GetId())

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: Dashboard.__set_properties
        self.SetBackgroundColour(wx.Colour(55, 85, 113))
        self.l_dashboard.SetBackgroundColour(wx.Colour(55, 85, 113))
        self.l_dashboard.SetForegroundColour(wx.Colour(255, 255, 255))
        self.l_dashboard.SetFont(wx.Font(30, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.bmap_text.SetSize(self.bmap_text.GetBestSize())
        self.bmap_photo.SetSize(self.bmap_photo.GetBestSize())
        self.bmap_quote.SetSize(self.bmap_quote.GetBestSize())
        self.bmap_link.SetSize(self.bmap_link.GetBestSize())
        self.bmap_chat.SetSize(self.bmap_chat.GetBestSize())
        self.bmap_audio.SetSize(self.bmap_audio.GetBestSize())
        self.bmap_video.SetSize(self.bmap_video.GetBestSize())
        self.p_botones.SetBackgroundColour(wx.Colour(255, 255, 255))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Dashboard.__do_layout
        s_dashboard = wx.BoxSizer(wx.VERTICAL)
        s_botones = wx.BoxSizer(wx.VERTICAL)
        gs_botones = wx.GridSizer(4, 3, 0, 0)
        s_dashboard.Add(self.l_dashboard, 0, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL, 0)
        s_dashboard.Add(self.sl_dashboard, 0, wx.LEFT|wx.RIGHT|wx.EXPAND, 10)
        gs_botones.Add(self.bmap_text, 0, wx.ALL|wx.EXPAND, 5)
        gs_botones.Add(self.bmap_photo, 0, wx.ALL|wx.EXPAND, 5)
        gs_botones.Add(self.bmap_quote, 0, wx.ALL|wx.EXPAND, 5)
        gs_botones.Add(self.bmap_link, 0, wx.ALL|wx.EXPAND, 5)
        gs_botones.Add(self.bmap_chat, 0, wx.ALL|wx.EXPAND, 5)
        gs_botones.Add(self.bmap_audio, 0, wx.ALL|wx.EXPAND, 5)
        gs_botones.Add((20, 20), 0, wx.ALL|wx.EXPAND, 5)
        gs_botones.Add(self.bmap_video, 0, wx.ALL|wx.EXPAND, 5)
        gs_botones.Add((20, 20), 0, wx.ALL|wx.EXPAND, 5)
        s_botones.Add(gs_botones, 1, wx.ALL|wx.EXPAND, 1)
        s_botones.Add(self.sl_botones, 0, wx.ALL|wx.EXPAND, 10)
        s_botones.Add(self.b_logout, 0, wx.ALL|wx.EXPAND, 10)
        self.p_botones.SetSizer(s_botones)
        s_dashboard.Add(self.p_botones, 1, wx.ALL|wx.EXPAND, 35)
        s_dashboard.Add((90, 85), 0, wx.ALL|wx.EXPAND, 30)
        self.SetSizer(s_dashboard)
        s_dashboard.Fit(self)
        # end wxGlade

# end of class Dashboard
    def OnPublishingOptions(self, evt):

        self.pos = len(self.GetChildren()) - 1
        self.cb_publishing = self.GetChildren()[self.pos].cb_publishing
        self.l_date = self.GetChildren()[self.pos].l_date
        self.tc_date = self.GetChildren()[self.pos].tc_date
        self.tc_tag = self.GetChildren()[self.pos].tc_tag
        
        if self.cb_publishing.GetValue() == "add to queue" or self.cb_publishing.GetValue() == "private":
            self.l_date.Show(False)
            self.tc_date.Show(False)
            self.tc_tag.SetFocus()
            
        if self.cb_publishing.GetValue() == "publish now" or self.cb_publishing.GetValue() == "publish on...":
            if self.cb_publishing.GetValue() == "publish on...":
                self.l_date.SetLabel('Publish time:')
                self.tc_date.SetValue('next tuesday, 10am')
            else:
                self.l_date.SetLabel('Date this post')
                self.tc_date.SetValue('now')
            
            self.l_date.Show()
            self.tc_date.Show()
            self.tc_date.SetFocus()
            
        if self.cb_publishing.GetValue() == "save as draft":
            self.l_date.SetLabel('Status message:')
            self.tc_date.SetValue('')
            self.tc_date.Show()
            self.tc_date.SetFocus()
            
    def OnText(self, evt):
    	self.text = Text(self, -1)
    	self.text.Show()

    def	OnPhoto(self, evt):
    	self.photo = Photo(self, -1)
    	self.photo.Show()

    def OnQuote(self, evt):
    	self.quote = Quote(self, -1)
    	self.quote.Show()

    def OnLink(self, evt):
    	self.link = Link(self, -1)
    	self.link.Show()

    def OnChat(self, evt):
    	self.chat = Chat(self, -1)
    	self.chat.Show()

    def OnAudio(self, evt):
    	self.audio = Audio(self, -1)
    	self.audio.Show()

    def OnVideo(self, evt):
    	self.video = Video(self, -1)
    	self.video.Show()

    def OnLogout(self, evt):
    	self.parent.Close()
