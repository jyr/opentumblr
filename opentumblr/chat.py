#!/usr/bin/env python
# -*- coding: us-ascii -*-
# generated by wxGlade 0.6.3 on Fri Aug 14 15:42:23 2009

import wx
import string
from message import Message
try:
    from opentumblr.tumblr import Api
except ImportError:
    from tumblr import Api
# begin wxGlade: extracode
# end wxGlade



class Chat(wx.Panel):
    def __init__(self, parent, id):
        # begin wxGlade: Chat.__init__
        #kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, parent, id)
        self.parent = parent
        self.api = self.parent.api
        self.s_chat_staticbox = wx.StaticBox(self, -1, "")
        self.l_addchat = wx.StaticText(self, -1, "Add a Chat Post")
        self.l_title = wx.StaticText(self, -1, "Title (optional)")
        self.tc_title = wx.TextCtrl(self, -1, "")
        self.l_dialogue = wx.StaticText(self, -1, "Dialogue")
        self.l_example = wx.StaticText(self, -1, "Example")
        self.l_tourist = wx.StaticText(self, -1, "Tourist: Could you give us directions to Olive Garden?")
        self.l_nyorker = wx.StaticText(self, -1, "New Yorker:No,but I could give you directions to an actual restaurant.")
        self.tc_dialogue = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE)
        self.b_create = wx.Button(self, -1, "Create post")
        self.b_cancel = wx.Button(self, -1, "Cancel")
        
        self.Bind(wx.EVT_BUTTON, self.OnCreateChat, id = self.b_create.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnCancel, id = self.b_cancel.GetId())

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: Chat.__set_properties
        self.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Lucida Grande"))
        self.l_addchat.SetFont(wx.Font(25, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.l_title.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.l_dialogue.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.l_example.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.l_example.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.l_tourist.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.l_tourist.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Lucida Grande"))
        self.l_nyorker.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.l_nyorker.SetFont(wx.Font(9, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Lucida Grande"))
        self.tc_dialogue.SetMinSize((293, 220))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Chat.__do_layout
        s_chat = wx.StaticBoxSizer(self.s_chat_staticbox, wx.VERTICAL)
        s_buttons = wx.BoxSizer(wx.HORIZONTAL)
        s_chat.Add(self.l_addchat, 0, wx.ALL, 2)
        s_chat.Add(self.l_title, 0, wx.ALL, 2)
        s_chat.Add(self.tc_title, 0, wx.ALL|wx.EXPAND, 10)
        s_chat.Add(self.l_dialogue, 0, wx.ALL, 2)
        s_chat.Add(self.l_example, 0, wx.LEFT|wx.TOP, 2)
        s_chat.Add(self.l_tourist, 0, wx.LEFT, 2)
        s_chat.Add(self.l_nyorker, 0, wx.LEFT, 2)
        s_chat.Add(self.tc_dialogue, 0, wx.ALL|wx.EXPAND, 8)
        s_buttons.Add(self.b_create, 0, wx.ALL|wx.EXPAND, 2)
        s_buttons.Add(self.b_cancel, 0, wx.LEFT|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 120)
        s_chat.Add(s_buttons, 0, wx.ALL|wx.EXPAND, 2)
        self.SetSizer(s_chat)
        s_chat.Fit(self)
        # end wxGlade

# end of class Chat
    def OnCreateChat(self, evt):
    	self.title = self.tc_title.GetValue().encode('utf-8')
    	self.conversation = self.tc_dialogue.GetValue().encode('utf-8')
        self.tags = self.tc_tag.GetValue().encode('utf-8')
        self.tags = string.replace(self.tags,' ', ',')
        self.date = self.tc_date.GetValue().encode('utf-8')

        if self.cb_publishing.GetValue() == 'private':
        	self.private = 1
        else:
        	self.private = 0
        
        if self.conversation:
            #self.format = None
            self.api = Api(self.api.name, self.api.email, self.api.password, self.private, self.date, self.tags)
            try:
                self.post = self.api.write_conversation(self.title, self.conversation)
            except:
                print "posteado en el blog primario"
            self.Close()
        else:
            Message('Dialogue is required')

    def OnCancel(self, evt):
	    self.Close()